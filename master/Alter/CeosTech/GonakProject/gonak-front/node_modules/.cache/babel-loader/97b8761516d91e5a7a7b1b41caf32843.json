{"ast":null,"code":"var _jsxFileName = \"/home/christopher/Documents/Alter/GonakProject/gonak-front/src/hooks/useForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useForm = (initialState, validator = null) => {\n  _s();\n\n  const [state, setState] = useState(initialState);\n  const [errors, setErrors] = useState({});\n\n  const handleInputChange = e => {\n    const changingInput = {\n      [e.target.name]: e.target.value\n    };\n    setState({ ...state,\n      ...changingInput\n    });\n  };\n\n  const handleCheckedChange = e => {\n    const changingInput = {\n      [e.target.name]: e.target.checked\n    };\n    setState({ ...state,\n      ...changingInput\n    });\n  };\n\n  const reinitialiserState = () => setState(initialState); // Methods for a multi-step form : will go to the next or previous step and generate the according button\n  // proceed to the next step\n\n\n  const nextStep = () => {\n    const {\n      currentStep\n    } = state; // If the form constraints are validated, move on to the next step\n\n    if (validator()) {\n      setState({ ...state,\n        currentStep: currentStep + 1\n      });\n    }\n  }; // go back to previous step\n\n\n  const prevStep = () => {\n    const {\n      currentStep\n    } = state;\n    setState({ ...state,\n      currentStep: currentStep - 1\n    });\n  }; // The \"next\" and \"previous\" button functions\n\n\n  const previousButton = () => {\n    let currentStep = state.currentStep; // If the current step is not 1, then render the \"previous\" button\n\n    if (currentStep !== 1) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"btnSteps\",\n        onClick: prevStep,\n        children: \"Pr\\xE9c\\xE9dent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this);\n    } // ...else return nothing\n\n\n    return null;\n  };\n\n  const nextButton = numberOfSteps => {\n    let currentStep = state.currentStep; // If the current step is not 3, then render the \"next\" button\n\n    if (currentStep < numberOfSteps) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"btnSteps float-right\",\n        onClick: nextStep,\n        children: \"Suivant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this);\n    } // If we arrive at the end of the form, render the validate button\n    else if (currentStep === numberOfSteps) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btnSteps float-right\",\n        children: \"Valider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this);\n    } // ...else render nothing\n\n\n    return null;\n  };\n\n  return {\n    state,\n    setState,\n    errors,\n    setErrors,\n    handleInputChange,\n    handleCheckedChange,\n    reinitialiserState,\n    previousButton,\n    nextButton\n  };\n};\n\n_s(useForm, \"1d5icvBAXHljV0blNWajHCey1eE=\");\n\nexport default useForm;","map":{"version":3,"sources":["/home/christopher/Documents/Alter/GonakProject/gonak-front/src/hooks/useForm.js"],"names":["useState","useForm","initialState","validator","state","setState","errors","setErrors","handleInputChange","e","changingInput","target","name","value","handleCheckedChange","checked","reinitialiserState","nextStep","currentStep","prevStep","previousButton","nextButton","numberOfSteps"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nconst useForm = (initialState, validator = null) => {\n  const [state, setState] = useState(initialState);\n  const [errors, setErrors] = useState({});\n\n  const handleInputChange = (e) => {\n    const changingInput = { [e.target.name]: e.target.value };\n\n    setState({\n      ...state,\n      ...changingInput,\n    });\n  };\n\n  const handleCheckedChange = (e) => {\n    const changingInput = { [e.target.name]: e.target.checked };\n\n    setState({\n      ...state,\n      ...changingInput,\n    });\n  };\n\n  const reinitialiserState = () => setState(initialState);\n\n  // Methods for a multi-step form : will go to the next or previous step and generate the according button\n  // proceed to the next step\n  const nextStep = () => {\n    const { currentStep } = state;\n    // If the form constraints are validated, move on to the next step\n    if (validator()) {\n      setState({         \n        ...state,\n        currentStep: currentStep + 1 \n      });\n    }\n  }\n  // go back to previous step\n  const prevStep = () => {\n      const { currentStep } = state;\n      setState({ \n        ...state,\n        currentStep: currentStep - 1 \n      });\n  }\n\n  // The \"next\" and \"previous\" button functions\n  const previousButton = () => {\n      let currentStep = state.currentStep;\n      // If the current step is not 1, then render the \"previous\" button\n      if(currentStep !==1){\n      return (\n          <p\n              className=\"btnSteps\"\n              onClick={prevStep}\n          >\n              Précédent\n          </p>\n      )\n      }\n      // ...else return nothing\n      return null;\n  }\n\n  const nextButton = (numberOfSteps) => {\n    let currentStep = state.currentStep;\n    // If the current step is not 3, then render the \"next\" button\n    if(currentStep < numberOfSteps){\n      return (\n        <p\n            className=\"btnSteps float-right\"\n            onClick={nextStep}\n        >\n            Suivant\n        </p> \n      )      \n    }\n    // If we arrive at the end of the form, render the validate button\n    else if (currentStep === numberOfSteps) {\n      return (\n        <button\n            type=\"submit\" \n            className=\"btnSteps float-right\"\n        >\n            Valider\n        </button> \n      )      \n    }\n    // ...else render nothing\n    return null;\n  }\n\n  return {\n    state,\n    setState,\n    errors,\n    setErrors,\n    handleInputChange,\n    handleCheckedChange,\n    reinitialiserState,\n    previousButton,\n    nextButton,\n  };\n};\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}