{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // *  Writing the Slices\n//+ createSlice returns a \"slice\" object that contains the generated reducer function as a field named reducer,\n//+ and the generated action creators inside an object called actions.\n\nexport const basketsSlice = createSlice({\n  name: \"baskets\",\n  initialState: [],\n  reducers: {\n    incrementQauntite: (state, action) => {\n      const productIdx = state.findIndex(product => product.nom === action.payload.nom);\n\n      if (productIdx !== -1) {\n        state[productIdx].quantite++;\n      }\n    },\n    decrementQauntite: (state, action) => {\n      const productIdx = state.findIndex(product => product.nom === action.payload.nom);\n\n      if (productIdx !== -1) {\n        if (state[productIdx].quantite === 1) {\n          state.splice(productIdx, 1);\n        } else {\n          state[productIdx].quantite--;\n        }\n      }\n    },\n    deleteProduct: (state, action) => {\n      const productIdx = state.findIndex(product => product.nom === action.payload.nom);\n      state.splice(productIdx, 1);\n    },\n    addProduct: (state, action) => {\n      state.push(action.payload);\n      console.log(\"ok1\"); // const productIdx = state.findIndex(\n      //   (product) => product.nom === action.payload.nom\n      // );\n      // if (productIdx !== -1) {\n      //   // const quantite = state[productIdx].quantite + action.payload.quantite;\n      //   // state.splice(productIdx, 1, {\n      //   //   ...action.payload,\n      //   //   quantite,\n      //   // });\n      //   const product = state[productIdx];\n      //   product.quantite += action.payload.quantite;\n      // } else {\n      //   state.push(action.payload);\n      // }\n    },\n    addMenu: (state, action) => {\n      state.push(action.payload);\n    },\n    emptyBasket: state => {\n      state.length = 0;\n    }\n  }\n}); //+ generated action creator functions :return an object with payload and type\n\nexport const {\n  addMenu,\n  incrementQauntite,\n  decrementQauntite,\n  incrementByAmount,\n  deleteProduct,\n  addProduct,\n  emptyBasket\n} = basketsSlice.actions; // useSelector(state => state.baskets) :returns the state for baskets\n\nexport const selectBaskets = state => state.baskets; // + the generated reducer function\n\nexport default basketsSlice.reducer;","map":{"version":3,"sources":["/home/christopher/Documents/Alter/GonakProject/gonak-front/src/app/Redux-slices/basketsSlice.js"],"names":["createSlice","basketsSlice","name","initialState","reducers","incrementQauntite","state","action","productIdx","findIndex","product","nom","payload","quantite","decrementQauntite","splice","deleteProduct","addProduct","push","console","log","addMenu","emptyBasket","length","incrementByAmount","actions","selectBaskets","baskets","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;AAEA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAGD,WAAW,CAAC;AACtCE,EAAAA,IAAI,EAAE,SADgC;AAEtCC,EAAAA,YAAY,EAAE,EAFwB;AAGtCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC,YAAMC,UAAU,GAAGF,KAAK,CAACG,SAAN,CAChBC,OAAD,IAAaA,OAAO,CAACC,GAAR,KAAgBJ,MAAM,CAACK,OAAP,CAAeD,GAD3B,CAAnB;;AAGA,UAAIH,UAAU,KAAK,CAAC,CAApB,EAAuB;AACrBF,QAAAA,KAAK,CAACE,UAAD,CAAL,CAAkBK,QAAlB;AACD;AACF,KARO;AASRC,IAAAA,iBAAiB,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACpC,YAAMC,UAAU,GAAGF,KAAK,CAACG,SAAN,CAChBC,OAAD,IAAaA,OAAO,CAACC,GAAR,KAAgBJ,MAAM,CAACK,OAAP,CAAeD,GAD3B,CAAnB;;AAIA,UAAIH,UAAU,KAAK,CAAC,CAApB,EAAuB;AACrB,YAAIF,KAAK,CAACE,UAAD,CAAL,CAAkBK,QAAlB,KAA+B,CAAnC,EAAsC;AACpCP,UAAAA,KAAK,CAACS,MAAN,CAAaP,UAAb,EAAyB,CAAzB;AACD,SAFD,MAEO;AACLF,UAAAA,KAAK,CAACE,UAAD,CAAL,CAAkBK,QAAlB;AACD;AACF;AACF,KArBO;AAuBRG,IAAAA,aAAa,EAAE,CAACV,KAAD,EAAQC,MAAR,KAAmB;AAChC,YAAMC,UAAU,GAAGF,KAAK,CAACG,SAAN,CAChBC,OAAD,IAAaA,OAAO,CAACC,GAAR,KAAgBJ,MAAM,CAACK,OAAP,CAAeD,GAD3B,CAAnB;AAGAL,MAAAA,KAAK,CAACS,MAAN,CAAaP,UAAb,EAAyB,CAAzB;AACD,KA5BO;AA8BRS,IAAAA,UAAU,EAAE,CAACX,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACY,IAAN,CAAWX,MAAM,CAACK,OAAlB;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAF6B,CAI7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAhDO;AAkDRC,IAAAA,OAAO,EAAE,CAACf,KAAD,EAAQC,MAAR,KAAmB;AAC1BD,MAAAA,KAAK,CAACY,IAAN,CAAWX,MAAM,CAACK,OAAlB;AACD,KApDO;AAsDRU,IAAAA,WAAW,EAAGhB,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACiB,MAAN,GAAe,CAAf;AACD;AAxDO;AAH4B,CAAD,CAAhC,C,CA+DP;;AACA,OAAO,MAAM;AACXF,EAAAA,OADW;AAEXhB,EAAAA,iBAFW;AAGXS,EAAAA,iBAHW;AAIXU,EAAAA,iBAJW;AAKXR,EAAAA,aALW;AAMXC,EAAAA,UANW;AAOXK,EAAAA;AAPW,IAQTrB,YAAY,CAACwB,OARV,C,CAUP;;AACA,OAAO,MAAMC,aAAa,GAAIpB,KAAD,IAAWA,KAAK,CAACqB,OAAvC,C,CAEP;;AACA,eAAe1B,YAAY,CAAC2B,OAA5B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// *  Writing the Slices\n\n//+ createSlice returns a \"slice\" object that contains the generated reducer function as a field named reducer,\n//+ and the generated action creators inside an object called actions.\nexport const basketsSlice = createSlice({\n  name: \"baskets\",\n  initialState: [],\n  reducers: {\n    incrementQauntite: (state, action) => {\n      const productIdx = state.findIndex(\n        (product) => product.nom === action.payload.nom\n      );\n      if (productIdx !== -1) {\n        state[productIdx].quantite++;\n      }\n    },\n    decrementQauntite: (state, action) => {\n      const productIdx = state.findIndex(\n        (product) => product.nom === action.payload.nom\n      );\n\n      if (productIdx !== -1) {\n        if (state[productIdx].quantite === 1) {\n          state.splice(productIdx, 1);\n        } else {\n          state[productIdx].quantite--;\n        }\n      }\n    },\n\n    deleteProduct: (state, action) => {\n      const productIdx = state.findIndex(\n        (product) => product.nom === action.payload.nom\n      );\n      state.splice(productIdx, 1);      \n    },\n\n    addProduct: (state, action) => {\n      state.push(action.payload);\n      console.log(\"ok1\");\n\n      // const productIdx = state.findIndex(\n      //   (product) => product.nom === action.payload.nom\n      // );\n      // if (productIdx !== -1) {\n      //   // const quantite = state[productIdx].quantite + action.payload.quantite;\n      //   // state.splice(productIdx, 1, {\n      //   //   ...action.payload,\n      //   //   quantite,\n      //   // });\n      //   const product = state[productIdx];\n      //   product.quantite += action.payload.quantite;\n      // } else {\n      //   state.push(action.payload);\n      // }\n    },\n\n    addMenu: (state, action) => {\n      state.push(action.payload)\n    },\n\n    emptyBasket: (state) => {\n      state.length = 0;\n    },\n  },\n});\n\n//+ generated action creator functions :return an object with payload and type\nexport const {\n  addMenu,\n  incrementQauntite,\n  decrementQauntite,\n  incrementByAmount,\n  deleteProduct,\n  addProduct,\n  emptyBasket,\n} = basketsSlice.actions;\n\n// useSelector(state => state.baskets) :returns the state for baskets\nexport const selectBaskets = (state) => state.baskets;\n\n// + the generated reducer function\nexport default basketsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}