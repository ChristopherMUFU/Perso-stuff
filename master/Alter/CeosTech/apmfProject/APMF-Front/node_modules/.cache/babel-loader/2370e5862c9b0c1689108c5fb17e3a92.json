{"ast":null,"code":"var _s = $RefreshSig$();\n\n// Allow to create a pagination : an array of datas splitted on several different pages, with page numbers to navigate in between\nimport { useEffect, useState } from \"react\";\n\nconst usePagination = (data, dataLimit, pageLimit) => {\n  _s();\n\n  // pagination system \n  const [pages] = useState(Math.round(data.length / dataLimit));\n  const [currentPage, setCurrentPage] = useState(1); // Scroll to top smoothly when we change pages\n\n  useEffect(() => {\n    window.scrollTo({\n      behavior: 'smooth',\n      top: '0px'\n    });\n  }, [currentPage]); // Function to know the maximum number of pages we can have\n\n  function getMaximumNumberOfPages() {\n    return data.length / dataLimit;\n  } // Functions to change pages\n\n\n  function goToNextPage() {\n    ;\n\n    if (currentPage !== getMaximumNumberOfPages()) {\n      setCurrentPage(page => page + 1);\n    }\n  }\n\n  function goToPreviousPage() {\n    if (currentPage !== 1) {\n      setCurrentPage(page => page - 1);\n    }\n  } // When the user click on a page number\n\n\n  function changePage(event) {\n    const pageNumber = Number(event.target.textContent);\n    setCurrentPage(pageNumber);\n  } //Return number of posts egal to dataLimit\n  // Will calculate exactly which slice of the data object to return\n\n\n  const getPaginatedData = () => {\n    const startIndex = currentPage * dataLimit - dataLimit;\n    const endIndex = startIndex + dataLimit;\n    return data.slice(startIndex, endIndex);\n  }; // Function to know how many page number we can display with a limit\n\n\n  const getPaginationGroup = () => {\n    let start = Math.floor((currentPage - 1) / pageLimit) * pageLimit;\n    const pagesArray = new Array(pageLimit).fill().map((_, idx) => start + idx + 1);\n    const maximumNumberPages = getMaximumNumberOfPages();\n    return pagesArray.filter(page => page <= maximumNumberPages);\n  };\n\n  return {\n    pages,\n    currentPage,\n    goToNextPage,\n    goToPreviousPage,\n    changePage,\n    getPaginatedData,\n    getPaginationGroup\n  };\n};\n\n_s(usePagination, \"SVwe0HEI+pLX1EydlNvG2aFL+9A=\");\n\nexport default usePagination;","map":{"version":3,"sources":["/home/christopher/Documents/Alter/apmfProject/APMF-Front/src/hooks/usePagination.js"],"names":["useEffect","useState","usePagination","data","dataLimit","pageLimit","pages","Math","round","length","currentPage","setCurrentPage","window","scrollTo","behavior","top","getMaximumNumberOfPages","goToNextPage","page","goToPreviousPage","changePage","event","pageNumber","Number","target","textContent","getPaginatedData","startIndex","endIndex","slice","getPaginationGroup","start","floor","pagesArray","Array","fill","map","_","idx","maximumNumberPages","filter"],"mappings":";;AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,SAAP,EAAkBC,SAAlB,KAAgC;AAAA;;AACjD;AACA,QAAM,CAACC,KAAD,IAAUL,QAAQ,CAACM,IAAI,CAACC,KAAL,CAAWL,IAAI,CAACM,MAAL,GAAcL,SAAzB,CAAD,CAAxB;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,CAAD,CAA9C,CAHiD,CAMjD;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,MAAM,CAACC,QAAP,CAAgB;AAAEC,MAAAA,QAAQ,EAAE,QAAZ;AAAsBC,MAAAA,GAAG,EAAE;AAA3B,KAAhB;AACH,GAFQ,EAEN,CAACL,WAAD,CAFM,CAAT,CAPiD,CAWjD;;AACA,WAASM,uBAAT,GAAoC;AACjC,WAAOb,IAAI,CAACM,MAAL,GAAcL,SAArB;AACF,GAdgD,CAgBjD;;;AACA,WAASa,YAAT,GAAwB;AAAC;;AACrB,QAAIP,WAAW,KAAKM,uBAAuB,EAA3C,EAA+C;AAC3CL,MAAAA,cAAc,CAAEO,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAd;AACH;AACJ;;AAED,WAASC,gBAAT,GAA4B;AACxB,QAAIT,WAAW,KAAK,CAApB,EAAuB;AACnBC,MAAAA,cAAc,CAAEO,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAd;AACH;AACJ,GA3BgD,CA6BjD;;;AACA,WAASE,UAAT,CAAoBC,KAApB,EAA2B;AACvB,UAAMC,UAAU,GAAGC,MAAM,CAACF,KAAK,CAACG,MAAN,CAAaC,WAAd,CAAzB;AACAd,IAAAA,cAAc,CAACW,UAAD,CAAd;AACH,GAjCgD,CAmCjD;AACA;;;AACA,QAAMI,gBAAgB,GAAG,MAAM;AAC3B,UAAMC,UAAU,GAAGjB,WAAW,GAAGN,SAAd,GAA0BA,SAA7C;AACA,UAAMwB,QAAQ,GAAGD,UAAU,GAAGvB,SAA9B;AACA,WAAOD,IAAI,CAAC0B,KAAL,CAAWF,UAAX,EAAuBC,QAAvB,CAAP;AACH,GAJD,CArCiD,CA2CjD;;;AACA,QAAME,kBAAkB,GAAG,MAAM;AAC7B,QAAIC,KAAK,GAAGxB,IAAI,CAACyB,KAAL,CAAW,CAACtB,WAAW,GAAG,CAAf,IAAoBL,SAA/B,IAA4CA,SAAxD;AACA,UAAM4B,UAAU,GAAG,IAAIC,KAAJ,CAAU7B,SAAV,EAAqB8B,IAArB,GAA4BC,GAA5B,CAAgC,CAACC,CAAD,EAAIC,GAAJ,KAAYP,KAAK,GAAGO,GAAR,GAAc,CAA1D,CAAnB;AACA,UAAMC,kBAAkB,GAAGvB,uBAAuB,EAAlD;AACA,WAAOiB,UAAU,CAACO,MAAX,CAAmBtB,IAAD,IAAUA,IAAI,IAAIqB,kBAApC,CAAP;AACH,GALD;;AAOA,SAAO;AACHjC,IAAAA,KADG;AAEHI,IAAAA,WAFG;AAGHO,IAAAA,YAHG;AAIHE,IAAAA,gBAJG;AAKHC,IAAAA,UALG;AAMHM,IAAAA,gBANG;AAOHI,IAAAA;AAPG,GAAP;AAWJ,CA9DD;;GAAM5B,a;;AAgEN,eAAeA,aAAf","sourcesContent":["// Allow to create a pagination : an array of datas splitted on several different pages, with page numbers to navigate in between\nimport { useEffect, useState } from \"react\";\n\nconst usePagination = (data, dataLimit, pageLimit) => {\n     // pagination system \n     const [pages] = useState(Math.round(data.length / dataLimit));\n     const [currentPage, setCurrentPage] = useState(1);\n \n     \n     // Scroll to top smoothly when we change pages\n     useEffect(() => {\n         window.scrollTo({ behavior: 'smooth', top: '0px' });\n     }, [currentPage]);\n\n     // Function to know the maximum number of pages we can have\n     function getMaximumNumberOfPages () {\n        return data.length / dataLimit;\n     }\n \n     // Functions to change pages\n     function goToNextPage() {;\n         if (currentPage !== getMaximumNumberOfPages()) {\n             setCurrentPage((page) => page + 1);\n         }\n     }\n \n     function goToPreviousPage() {\n         if (currentPage !== 1) {\n             setCurrentPage((page) => page - 1);\n         }\n     }\n \n     // When the user click on a page number\n     function changePage(event) {\n         const pageNumber = Number(event.target.textContent);\n         setCurrentPage(pageNumber);\n     }\n \n     //Return number of posts egal to dataLimit\n     // Will calculate exactly which slice of the data object to return\n     const getPaginatedData = () => {\n         const startIndex = currentPage * dataLimit - dataLimit;\n         const endIndex = startIndex + dataLimit;\n         return data.slice(startIndex, endIndex);\n     };\n \n     // Function to know how many page number we can display with a limit\n     const getPaginationGroup = () => {\n         let start = Math.floor((currentPage - 1) / pageLimit) * pageLimit;\n         const pagesArray = new Array(pageLimit).fill().map((_, idx) => start + idx + 1);\n         const maximumNumberPages = getMaximumNumberOfPages();\n         return pagesArray.filter((page) => page <= maximumNumberPages)\n     };\n\n     return {\n         pages,\n         currentPage,\n         goToNextPage,\n         goToPreviousPage,\n         changePage,\n         getPaginatedData,\n         getPaginationGroup,\n     }\n \n\n}\n\nexport default usePagination;"]},"metadata":{},"sourceType":"module"}