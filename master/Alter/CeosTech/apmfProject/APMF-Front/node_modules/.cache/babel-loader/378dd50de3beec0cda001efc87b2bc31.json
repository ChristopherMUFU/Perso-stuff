{"ast":null,"code":"/* eslint-disable import/prefer-default-export */\nimport slugify from 'slugify';\nimport { menuInfos } from '../../data/app/subMenus';\nimport { subSubMenu } from '../../data/app/subMenus';\nimport { menuContent } from '../../data/app/menuContent';\n\nconst getSlugFromTitle = (title = '') => {\n  // we use a regex to transform the title into something that fits the slug norms\n  const modifiedTitle = title.replace(/[&]/g, '').replace(/[_]/g, '-');\n  const slug = slugify(modifiedTitle, {\n    lower: true,\n    remove: /[*+~.()'\"!:@&]/g\n  });\n  return slug;\n}; // find the menu that matches the one selected by the user\n\n\nconst getMenuBySlug = linkMenuSelected => {\n  const menu = menuInfos.find(menuItem => menuItem.link === getSlugFromTitle(linkMenuSelected));\n  return menu;\n}; // find the submenu that matches the url slug\n\n\nexport const getSubMenuBySlug = (linkMenuSelected, linkSubMenuSelected) => {\n  const menu = getMenuBySlug(linkMenuSelected);\n  const subMenuFound = menu.menu.find(menuItem => {\n    return menuItem.link === getSlugFromTitle(linkSubMenuSelected);\n  });\n  return subMenuFound;\n};\nexport const getSubSubMenu = subMenu => {\n  if (subMenu.subSubMenu) {\n    const found = subSubMenu.find(menu => menu.id === subMenu.subSubMenu_id);\n    return found;\n  } else return false;\n};\nexport const getSubSubMenuPerId = (subSubMenu, subSubMenuId) => {\n  const menuSelected = subSubMenu.menu.find(menu => menu.id === subSubMenuId);\n  return menuSelected;\n};\nexport const getSubSubMenuContent = (subSubMenu, subSubMenuId) => {\n  const menuSelected = subSubMenu.menu.find(menu => menu.id === subSubMenuId);\n  return menuContent.find(content => content.id === menuSelected.content_id).content;\n};","map":{"version":3,"sources":["/home/christopher/Documents/Alter/apmfProject/APMF-Front/src/utilities/app/menu.js"],"names":["slugify","menuInfos","subSubMenu","menuContent","getSlugFromTitle","title","modifiedTitle","replace","slug","lower","remove","getMenuBySlug","linkMenuSelected","menu","find","menuItem","link","getSubMenuBySlug","linkSubMenuSelected","subMenuFound","getSubSubMenu","subMenu","found","id","subSubMenu_id","getSubSubMenuPerId","subSubMenuId","menuSelected","getSubSubMenuContent","content","content_id"],"mappings":"AAAA;AACA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,WAAT,QAA4B,4BAA5B;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,KAAK,GAAG,EAAT,KAAgB;AACvC;AACA,QAAMC,aAAa,GAAGD,KAAK,CAACE,OAAN,CAAc,MAAd,EAAsB,EAAtB,EAA0BA,OAA1B,CAAkC,MAAlC,EAA0C,GAA1C,CAAtB;AACA,QAAMC,IAAI,GAAGR,OAAO,CAACM,aAAD,EAAgB;AAChCG,IAAAA,KAAK,EAAE,IADyB;AAEhCC,IAAAA,MAAM,EAAE;AAFwB,GAAhB,CAApB;AAIA,SAAOF,IAAP;AACD,CARD,C,CAUA;;;AACA,MAAMG,aAAa,GAAIC,gBAAD,IAAsB;AAC1C,QAAMC,IAAI,GAAGZ,SAAS,CAACa,IAAV,CAAgBC,QAAD,IAAcA,QAAQ,CAACC,IAAT,KAAkBZ,gBAAgB,CAACQ,gBAAD,CAA/D,CAAb;AACA,SAAOC,IAAP;AACD,CAHD,C,CAKA;;;AACA,OAAO,MAAMI,gBAAgB,GAAG,CAACL,gBAAD,EAAmBM,mBAAnB,KAA2C;AACzE,QAAML,IAAI,GAAGF,aAAa,CAACC,gBAAD,CAA1B;AACA,QAAMO,YAAY,GAAGN,IAAI,CAACA,IAAL,CAAUC,IAAV,CAAgBC,QAAD,IAAc;AAChD,WAAOA,QAAQ,CAACC,IAAT,KAAkBZ,gBAAgB,CAACc,mBAAD,CAAzC;AACD,GAFoB,CAArB;AAGA,SAAOC,YAAP;AACD,CANM;AAQP,OAAO,MAAMC,aAAa,GAAIC,OAAD,IAAa;AACxC,MAAIA,OAAO,CAACnB,UAAZ,EAAwB;AACtB,UAAMoB,KAAK,GAAGpB,UAAU,CAACY,IAAX,CAAiBD,IAAD,IAAUA,IAAI,CAACU,EAAL,KAAYF,OAAO,CAACG,aAA9C,CAAd;AACA,WAAOF,KAAP;AACD,GAHD,MAKE,OAAO,KAAP;AACH,CAPM;AAUP,OAAO,MAAMG,kBAAkB,GAAG,CAACvB,UAAD,EAAawB,YAAb,KAA8B;AAC9D,QAAMC,YAAY,GAAGzB,UAAU,CAACW,IAAX,CAAgBC,IAAhB,CAAsBD,IAAD,IAAUA,IAAI,CAACU,EAAL,KAAYG,YAA3C,CAArB;AACA,SAAOC,YAAP;AACD,CAHM;AAKP,OAAO,MAAMC,oBAAoB,GAAG,CAAC1B,UAAD,EAAawB,YAAb,KAA8B;AAChE,QAAMC,YAAY,GAAGzB,UAAU,CAACW,IAAX,CAAgBC,IAAhB,CAAsBD,IAAD,IAAUA,IAAI,CAACU,EAAL,KAAYG,YAA3C,CAArB;AACA,SAAOvB,WAAW,CAACW,IAAZ,CAAkBe,OAAD,IAAaA,OAAO,CAACN,EAAR,KAAeI,YAAY,CAACG,UAA1D,EAAsED,OAA7E;AACD,CAHM","sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport slugify from 'slugify';\nimport { menuInfos } from '../../data/app/subMenus';\nimport { subSubMenu } from '../../data/app/subMenus';\nimport { menuContent } from '../../data/app/menuContent';\n\nconst getSlugFromTitle = (title = '') => {\n  // we use a regex to transform the title into something that fits the slug norms\n  const modifiedTitle = title.replace(/[&]/g, '').replace(/[_]/g, '-');\n  const slug = slugify(modifiedTitle, {\n      lower: true,\n      remove: /[*+~.()'\"!:@&]/g,\n  });\n  return slug;\n};\n\n// find the menu that matches the one selected by the user\nconst getMenuBySlug = (linkMenuSelected) => {\n  const menu = menuInfos.find((menuItem) => menuItem.link === getSlugFromTitle(linkMenuSelected));\n  return menu;\n}\n\n// find the submenu that matches the url slug\nexport const getSubMenuBySlug = (linkMenuSelected, linkSubMenuSelected) => {\n  const menu = getMenuBySlug(linkMenuSelected);\n  const subMenuFound = menu.menu.find((menuItem) => {\n    return menuItem.link === getSlugFromTitle(linkSubMenuSelected)\n  });\n  return subMenuFound;\n}\n\nexport const getSubSubMenu = (subMenu) => {\n  if (subMenu.subSubMenu) {\n    const found = subSubMenu.find((menu) => menu.id === subMenu.subSubMenu_id);\n    return found;    \n  }\n  else\n    return false\n};\n\n\nexport const getSubSubMenuPerId = (subSubMenu, subSubMenuId) => {  \n  const menuSelected = subSubMenu.menu.find((menu) => menu.id === subSubMenuId);\n  return menuSelected;\n}\n\nexport const getSubSubMenuContent = (subSubMenu, subSubMenuId) => {  \n  const menuSelected = subSubMenu.menu.find((menu) => menu.id === subSubMenuId);\n  return menuContent.find((content) => content.id === menuSelected.content_id).content;\n}"]},"metadata":{},"sourceType":"module"}