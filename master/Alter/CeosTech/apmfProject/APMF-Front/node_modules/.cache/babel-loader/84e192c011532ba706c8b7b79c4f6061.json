{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { sendrequest } from \"../../middlewares/request\"; // Slice for the news of the site\n// export const Global_admin = () => {\n//   const [global_admin, setGlobal_admin] = useState(false);\n// };\n// *  Writing the Slices\n//+ createSlice returns a \"slice\" object that contains the generated reducer function as a field named reducer,\n//+ and the generated action creators inside an object called actions.\n\nexport const newsSlice = createSlice({\n  name: \"news\",\n  initialState: {\n    news: [],\n    isNewsLoaded: false\n  },\n  reducers: {\n    // Store datas in state\n    setNews: (state, action) => {\n      state.news = action.payload;\n      state.isNewsLoaded = true;\n    }\n  }\n}); //+ generated action creator functions :return an object with payload and type\n\nconst {\n  setNews\n} = newsSlice.actions; // Will send the request to the API and then dispatch the result to the reducer.\n\nexport const getNews = () => async dispatch => {\n  try {\n    // Send the request\n    const news = await sendrequest('GET', 'articles/');\n    const newsData = [...news['data']]; // Store the datas in the state. Why ? They can be accessible from any page, and if they are modified, the DOM that uses those datas will be automatically updated\n\n    dispatch(setNews({\n      newsData\n    }));\n  } catch (e) {\n    dispatch(setNews({\n      undefined\n    }));\n  }\n};\nexport const getNewsState = state => state.news; // + the generated reducer function\n\nexport default newsSlice.reducer;","map":{"version":3,"sources":["/home/christopher/Documents/Alter/apmfProject/APMF-Front/src/app/Redux-slices/newsSlice.js"],"names":["createSlice","sendrequest","newsSlice","name","initialState","news","isNewsLoaded","reducers","setNews","state","action","payload","actions","getNews","dispatch","newsData","e","undefined","getNewsState","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,QAA4B,2BAA5B,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,SAAS,GAAGF,WAAW,CAAC;AACnCG,EAAAA,IAAI,EAAE,MAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE,EADM;AAEZC,IAAAA,YAAY,EAAE;AAFF,GAFqB;AAMnCC,EAAAA,QAAQ,EAAE;AACR;AACAC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxBD,MAAAA,KAAK,CAACJ,IAAN,GAAaK,MAAM,CAACC,OAApB;AACAF,MAAAA,KAAK,CAACH,YAAN,GAAqB,IAArB;AACH;AALO;AANyB,CAAD,CAA7B,C,CAeP;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAcN,SAAS,CAACU,OAA9B,C,CAEA;;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC3C,MAAI;AACA;AACA,UAAMT,IAAI,GAAG,MAAMJ,WAAW,CAAC,KAAD,EAAQ,WAAR,CAA9B;AACA,UAAMc,QAAQ,GAAG,CAAC,GAAGV,IAAI,CAAC,MAAD,CAAR,CAAjB,CAHA,CAIA;;AACAS,IAAAA,QAAQ,CAACN,OAAO,CAAC;AAACO,MAAAA;AAAD,KAAD,CAAR,CAAR;AACH,GAND,CAME,OAAOC,CAAP,EAAU;AACVF,IAAAA,QAAQ,CAACN,OAAO,CAAC;AAACS,MAAAA;AAAD,KAAD,CAAR,CAAR;AACD;AACJ,CAVM;AAYP,OAAO,MAAMC,YAAY,GAAIT,KAAD,IAAWA,KAAK,CAACJ,IAAtC,C,CAEP;;AACA,eAAeH,SAAS,CAACiB,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { sendrequest } from \"../../middlewares/request\";\n\n// Slice for the news of the site\n\n// export const Global_admin = () => {\n//   const [global_admin, setGlobal_admin] = useState(false);\n// };\n// *  Writing the Slices\n//+ createSlice returns a \"slice\" object that contains the generated reducer function as a field named reducer,\n//+ and the generated action creators inside an object called actions.\nexport const newsSlice = createSlice({\n  name: \"news\",\n  initialState: {   \n    news: [],\n    isNewsLoaded: false,\n  },\n  reducers: {\n    // Store datas in state\n    setNews: (state, action) => {\n        state.news = action.payload;\n        state.isNewsLoaded = true;\n    },\n  },\n});\n\n//+ generated action creator functions :return an object with payload and type\nconst { setNews } = newsSlice.actions;\n\n// Will send the request to the API and then dispatch the result to the reducer.\n\nexport const getNews = () => async dispatch => {\n    try {\n        // Send the request\n        const news = await sendrequest('GET', 'articles/');\n        const newsData = [...news['data']];\n        // Store the datas in the state. Why ? They can be accessible from any page, and if they are modified, the DOM that uses those datas will be automatically updated\n        dispatch(setNews({newsData}));\n    } catch (e) {\n      dispatch(setNews({undefined}));\n    }\n}\n\nexport const getNewsState = (state) => state.news;\n\n// + the generated reducer function\nexport default newsSlice.reducer;"]},"metadata":{},"sourceType":"module"}