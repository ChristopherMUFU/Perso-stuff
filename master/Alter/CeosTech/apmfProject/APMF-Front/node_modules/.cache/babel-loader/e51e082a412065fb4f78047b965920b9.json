{"ast":null,"code":"var _jsxFileName = \"/home/christopher/Documents/Alter/apmfProject/APMF-Front/src/components/app/Association/index.js\",\n    _s = $RefreshSig$();\n\nimport './styles.css';\nimport PropTypes from 'prop-types';\nimport { getSubMenuBySlug, getSubSubMenu, getSubSubMenuPerId } from \"../../../utilities/app/menu\";\nimport { useSelector } from \"react-redux\";\nimport { getSiteState } from \"../../../app/Redux-slices/siteSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Association = ({\n  menuLink,\n  slug\n}) => {\n  _s();\n\n  // We have to select the content that matches the subsubmenu selected by the user\n  // First we have the menu selected\n  const subMenu = getSubMenuBySlug(menuLink, slug); // Then the list of the subMenus that match that menu. If there is no subSubMenu, it will return false, and we can display the component of the SubMenu\n\n  const subSubMenu = getSubSubMenu(subMenu); //Then the id of the specific submenu selected. We will display the component of the subSubMenu selected.\n\n  const subSubMenuId = useSelector(getSiteState).subMenuId;\n\n  const getSubSubMenuComponent = () => {\n    // Then the exact subSuBMenu selected\n    const subSubMenuSelected = getSubSubMenuPerId(subSubMenu, subSubMenuId);\n    return subSubMenuSelected.component;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"association-page\",\n    children: [subSubMenu === false && subMenu.component, subSubMenu !== false && getSubSubMenuComponent()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Association, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\n_c = Association;\nAssociation.propTypes = {\n  slug: PropTypes.string.isRequired,\n  menuLink: PropTypes.string.isRequired\n};\nexport default Association;\n\nvar _c;\n\n$RefreshReg$(_c, \"Association\");","map":{"version":3,"sources":["/home/christopher/Documents/Alter/apmfProject/APMF-Front/src/components/app/Association/index.js"],"names":["PropTypes","getSubMenuBySlug","getSubSubMenu","getSubSubMenuPerId","useSelector","getSiteState","Association","menuLink","slug","subMenu","subSubMenu","subSubMenuId","subMenuId","getSubSubMenuComponent","subSubMenuSelected","component","propTypes","string","isRequired"],"mappings":";;;AAAA,OAAO,cAAP;AACA,OAAOA,SAAP,MAAsB,YAAtB;AAEA,SACEC,gBADF,EAEEC,aAFF,EAGEC,kBAHF,QAIO,6BAJP;AAMA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,YAAT,QAA6B,qCAA7B;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAwB;AAAA;;AACxC;AACA;AACA,QAAMC,OAAO,GAAGR,gBAAgB,CAACM,QAAD,EAAWC,IAAX,CAAhC,CAHwC,CAIxC;;AACA,QAAME,UAAU,GAAGR,aAAa,CAACO,OAAD,CAAhC,CALwC,CAMxC;;AACA,QAAME,YAAY,GAAGP,WAAW,CAACC,YAAD,CAAX,CAA0BO,SAA/C;;AAEA,QAAMC,sBAAsB,GAAG,MAAM;AACjC;AACA,UAAMC,kBAAkB,GAAGX,kBAAkB,CAACO,UAAD,EAAaC,YAAb,CAA7C;AACA,WAAOG,kBAAkB,CAACC,SAA1B;AACH,GAJD;;AAMA,sBACI;AAAK,IAAA,EAAE,EAAC,kBAAR;AAAA,eACKL,UAAU,KAAK,KAAf,IACGD,OAAO,CAACM,SAFhB,EAIKL,UAAU,KAAK,KAAf,IACGG,sBAAsB,EAL9B;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAzBD;;GAAMP,W;UAOmBF,W;;;KAPnBE,W;AA2BNA,WAAW,CAACU,SAAZ,GAAwB;AACpBR,EAAAA,IAAI,EAAER,SAAS,CAACiB,MAAV,CAAiBC,UADH;AAEpBX,EAAAA,QAAQ,EAAEP,SAAS,CAACiB,MAAV,CAAiBC;AAFP,CAAxB;AAKA,eAAeZ,WAAf","sourcesContent":["import './styles.css';\nimport PropTypes from 'prop-types';\n\nimport {\n  getSubMenuBySlug,\n  getSubSubMenu,\n  getSubSubMenuPerId\n} from \"../../../utilities/app/menu\";\n\nimport { useSelector } from \"react-redux\";\nimport { getSiteState } from \"../../../app/Redux-slices/siteSlice\";\n\nconst Association = ({ menuLink, slug }) => {\n    // We have to select the content that matches the subsubmenu selected by the user\n    // First we have the menu selected\n    const subMenu = getSubMenuBySlug(menuLink, slug);        \n    // Then the list of the subMenus that match that menu. If there is no subSubMenu, it will return false, and we can display the component of the SubMenu\n    const subSubMenu = getSubSubMenu(subMenu);\n    //Then the id of the specific submenu selected. We will display the component of the subSubMenu selected.\n    const subSubMenuId = useSelector(getSiteState).subMenuId;\n\n    const getSubSubMenuComponent = () => {\n        // Then the exact subSuBMenu selected\n        const subSubMenuSelected = getSubSubMenuPerId(subSubMenu, subSubMenuId);\n        return subSubMenuSelected.component;        \n    }\n\n    return (\n        <div id=\"association-page\">\n            {subSubMenu === false && (\n                subMenu.component\n            )}\n            {subSubMenu !== false && (\n                getSubSubMenuComponent()\n            )}     \n        </div>\n    )\n}\n\nAssociation.propTypes = {\n    slug: PropTypes.string.isRequired,\n    menuLink: PropTypes.string.isRequired,\n};\n\nexport default Association;"]},"metadata":{},"sourceType":"module"}